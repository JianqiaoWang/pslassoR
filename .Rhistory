AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elsticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 10
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(0.2, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elsticnet")
#return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 10
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(0.2, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
#Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
#Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
#Beta.elsticnet = glmreg(X, y, logistic = F, method = "elsticnet")
#return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 10
rho = 0.4
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
#Beta.elsticnet = glmreg(X, y, logistic = F, method = "elsticnet")
#return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 10
rho = 0.4
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elsticnet")
#return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 10
rho = 0.4
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 10
rho = 0.4
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
print(length(Beta.PSlasso))
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
print(length(Beta.Tracelasso))
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
print(length(Beta.lasso))
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
print(length(Beta.ridge))
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
devtools::check()
devtools::build()
library(pslassoR)
set.seed(1)
n = 100
P = 300
K = 1 # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(0.2, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
#y = rbinom(n,size = 1, prob = expit(X %*% beta))
devtools::check()
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 10
rho = 0.4
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
print(length(Beta.PSlasso))
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
print(length(Beta.Tracelasso))
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
print(length(Beta.lasso))
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
print(length(Beta.ridge))
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
devtools::check()
devtools::check()
source('~/Desktop/UPenn Course/2019 spring/computing/pslassoR/R/Auto.R', echo=TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 10
rho = 0.4
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
print(length(Beta.PSlasso))
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
print(length(Beta.Tracelasso))
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
print(length(Beta.lasso))
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
print(length(Beta.ridge))
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 10
rho = 0.4
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
print(length(Beta.PSlasso))
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
print(length(Beta.Tracelasso))
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
print(length(Beta.lasso))
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
print(length(Beta.ridge))
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 20
rho = 0.4
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
print(length(Beta.PSlasso))
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
print(length(Beta.Tracelasso))
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
print(length(Beta.lasso))
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
print(length(Beta.ridge))
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 20
rho = 0.4
#K = k # K measures sparsity
beta = 5*beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 20
rho = 0.8
#K = k # K measures sparsity
beta = beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
library(parallel)
result = mclapply(1:10, Simulation, n = 100, K = 20, rho = 0.2,  mc.cores = 1)
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i, n, K, rho){
set.seed(i)
n = n
P = 500
K = K
rho = rho
#K = k # K measures sparsity
beta = beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
result = mclapply(1:10, Simulation, n = 100, K = 20, rho = 0.2,  mc.cores = 1)
colMeans(result)
result
colMeans(do.call(result, rbind))
do.call(rbind, result)
colMeans(do.call(rbind, result))
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i, n, K, rho){
set.seed(i)
n = n
P = 500
K = K
rho = rho
#K = k # K measures sparsity
beta = beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, rho, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
result.all.auto <- vector()
for(rho in c(0.2, 0.8)){
for(n in c(100, 400)){
for(K in c(5,20,40)){
result = mclapply(1:10, Simulation, n = n, K = K, rho = rho,  mc.cores = 1)
result.all.auto = cbind(result.all,
colMeans(do.call(rbind, result)))
}
}
}
library(parallel)
result.all.auto <- vector()
for(rho in c(0.2, 0.8)){
for(n in c(100, 400)){
for(K in c(5,20,40)){
result = mclapply(1:10, Simulation, n = n, K = K, rho = rho,  mc.cores = 1)
result.all.auto = cbind(result.all.auto,
colMeans(do.call(rbind, result)))
}
}
}
