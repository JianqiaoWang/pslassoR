Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i){
set.seed(i)
n = 100
P = 500
K = 20
rho = 0.8
#K = k # K measures sparsity
beta = beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
mclapply(1:10, Simulation, mc.cores = 1)
library(parallel)
result = mclapply(1:10, Simulation, n = 100, K = 20, rho = 0.2,  mc.cores = 1)
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i, n, K, rho){
set.seed(i)
n = n
P = 500
K = K
rho = rho
#K = k # K measures sparsity
beta = beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
result = mclapply(1:10, Simulation, n = 100, K = 20, rho = 0.2,  mc.cores = 1)
colMeans(result)
result
colMeans(do.call(result, rbind))
do.call(rbind, result)
colMeans(do.call(rbind, result))
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i, n, K, rho){
set.seed(i)
n = n
P = 500
K = K
rho = rho
#K = k # K measures sparsity
beta = beta.coef(K, P)
X = Auto(rho, P = P, N = n)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, rho, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
result.all.auto <- vector()
for(rho in c(0.2, 0.8)){
for(n in c(100, 400)){
for(K in c(5,20,40)){
result = mclapply(1:10, Simulation, n = n, K = K, rho = rho,  mc.cores = 1)
result.all.auto = cbind(result.all,
colMeans(do.call(rbind, result)))
}
}
}
library(parallel)
result.all.auto <- vector()
for(rho in c(0.2, 0.8)){
for(n in c(100, 400)){
for(K in c(5,20,40)){
result = mclapply(1:10, Simulation, n = n, K = K, rho = rho,  mc.cores = 1)
result.all.auto = cbind(result.all.auto,
colMeans(do.call(rbind, result)))
}
}
}
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i, n, K, rho, type){
set.seed(i)
n = n
P = 500
K = K
rho = rho
#K = k # K measures sparsity
beta = beta.coef(K, P)
if (type == "Auto"){
X = Auto(rho, P = P, N = n)
}
if(type == "block"){
X = Block(rho, P, N = n, bandwidth = 5)
}
if(type = "exch"){
X = Exch(rho, P, N = n)
}
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, rho, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(pslassoR)
setwd(..)
setwd("..")
library(pslassoR)
devtools::check()
devtools::check()
getwd()
setwd("~/Desktop/UPenn Course/2019 spring/computing/pslassoR")
devtools::check()
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i, n, K, rho, type){
set.seed(i)
n = n
P = 500
K = K
rho = rho
#K = k # K measures sparsity
beta = beta.coef(K, P)
if (type == "Auto"){
X = Auto(rho, P = P, N = n)
}
if(type == "block"){
X = Block(rho, P, N = n, bandwidth = 5)
}
if(type = "exch"){
library(pslassoR)
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
Simulation = function(i, n, K, rho, type){
set.seed(i)
n = n
P = 500
K = K
rho = rho
#K = k # K measures sparsity
beta = beta.coef(K, P)
if (type == "Auto"){
X = Auto(rho, P = P, N = n)
}
if(type == "block"){
X = Block(rho, P, N = n, bandwidth = 5)
}
if(type == "exch"){
X = Exch(rho, P, N = n)
}
expit = function(x){
return(exp(x)/(1 + exp(x)))
}
y = X %*% beta + rnorm(n)
AUC = function(T.Beta, Beta){
library(pROC)
return(auc(T.Beta, Beta))
}
y = as.vector(y)
T.Beta = (abs(beta) > 0)
Beta.PSlasso = PSlasso(X, y, logistic = F)
Beta.Tracelasso = TraceLasso(X, y, logistic = F)
Beta.lasso = glmreg(X, y, logistic = F, method = "lasso")
Beta.ridge = glmreg(X, y, logistic = F, method = "ridge")
Beta.elsticnet = glmreg(X, y, logistic = F, method = "elasticnet")
return(c(n, K, rho, K, AUC(T.Beta, Beta.PSlasso), AUC(T.Beta, Beta.Tracelasso), AUC(T.Beta, Beta.lasso), AUC(T.Beta, Beta.ridge), AUC(T.Beta, Beta.elsticnet)))
}
library(parallel)
for(type in c("Auto", "block", "exch")){
for(rho in c(0.2, 0.8)){
for(n in c(100, 400)){
for(K in c(5,20,40)){
result.all.auto <- vector()
result = mclapply(1:10, Simulation, n = n, K = K, rho = rho, type = type, mc.cores = 1)
result.all.auto = cbind(result.all.auto,
colMeans(do.call(rbind, result)))
}
}
}
result.all.auto = as.data.frame(result.all.auto)
result.all.auto$type = type
}
library(parallel)
result.all.auto <- vector()
for(type in c("Auto", "block", "exch")){
for(rho in c(0.2, 0.8)){
for(n in c(100, 400)){
for(K in c(5,20,40)){
result = mclapply(1:10, Simulation, n = n, K = K, rho = rho, type = type, mc.cores = 1)
result.all.auto = cbind(result.all.auto,
colMeans(do.call(rbind, result)))
}
}
}
result.all.auto = as.data.frame(result.all.auto)
result.all.auto$type = type
}
result.all.auto
View(result.all.auto)
t(result.all.auto)
t(result.all.auto)
temp = t(result.all.auto)
View(temp)
temp = temp[-"type",]
temp = temp[-"type",]
temp = temp[-14,]
temp = t(result.all.auto)
temp = temp[-13,]
temp = data.frame(temp)
colnames(temp) <- c("n", "K", "rho", "PSlasso","TraceLasso", "lasso", "Ridge", "elasticnet")
temp
View(temp)
temp[,-4]
temp2 = temp[,-4]
View(temp2)
colnames(temp2) <- c("n", "K", "rho", "PSlasso","TraceLasso", "lasso", "Ridge", "elasticnet")
temp2
temp2$type = rep(c("Auto", "block", "exch"), each = 12)
temp2
View(temp2)
simu.table = temp2
save(simu.table, file = "simutable.Rdata")
load("simutable.Rdata")
library(knitr)
kable(simu.table, digits = 4)
load("simutable.Rdata")
library(knitr)
kable(simu.table, format ="html", digits = 4)
install.packages("pslassoR")
install.packages("pslassoR")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(pslassoR)
devtools::build()
library(pslassoR)
library(pslassoR)
setwd(..)
setwd("..")
library(pslassoR)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(pslassoR)
Block
??Block
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
#library(pslassoR)
load("simutable.Rdata")
library(knitr)
simu.table[,1:3] = as.integer(simu.table[,1:3])
View(simu.table)
load("simutable.Rdata")
library(knitr)
simu.table[,1:3] = as.numeric(simu.table[,1:3])
View(simu.table)
str(simu.table)
simu.table[,-ncol(simu.table)] = as.numeric(simu.table[,-ncol(simu.table)])
str(simu.table[,1])
str(as.numeric(simu.table[,1]))
simu.table[,-ncol(simu.table)] = as.numeric(as.character(simu.table[,-ncol(simu.table)]))
simu.table
load("simutable.Rdata")
as.character(simu.table[,-ncol(simu.table)])
simu.table[,-ncol(simu.table)]
apply(simu.table[,-ncol(simu.table)], 2, as.character)
apply(simu.table[,-ncol(simu.table)], 2, as.numeric(as.character))
apply(simu.table[,-ncol(simu.table)], 2, function(x){ as.numeric(as.character(x))})
simu.table[,-ncol(simu.table)] = apply(simu.table[,-ncol(simu.table)], 2, function(x){ as.numeric(as.character(x))})
simu.table
load("simutable.Rdata")
library(knitr)
simu.table[,-ncol(simu.table)] = apply(simu.table[,-ncol(simu.table)], 2, function(x){ as.numeric(as.character(x))})
kable(simu.table, format ="latex", digits = 4, caption = "Simulation result")
kable(simu.table, format ="latex", digits = 4, caption = "Simulation result")
library(dplyr)
# From http://stackoverflow.com/questions/1181060
stocks <- tibble(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
gather(stocks, stock, price, -time)
library(tidyr)
stocks
gather(stocks, stock, price, -time)
tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
plotdata
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = rho, y = AUC, fill = K)) + geom_line()+ facet_grid(type ~ n)
View(plotdata)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.facotr(rho), y = AUC, color = as.factor(K))) + geom_line()+ facet_grid(type ~ n)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.factor(rho), y = AUC, color = as.factor(K))) + geom_line()+ facet_grid(type ~ n)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.factor(rho), y = AUC, color = method)) + geom_point()+ facet_grid(type ~ n)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = (rho), y = AUC, color = method)) + geom_point()+ facet_grid(type ~ n)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.factor(rho), y = AUC, color = method)) + geom_point()+ facet_grid(type ~ n)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.factor(rho), y = AUC, color = method)) + geom_point()+ facet_grid(type ~ K)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.factor(rho), y = AUC, color = method, shape = n)) + geom_point(size = 5)+ facet_grid(type ~ K)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.factor(rho), y = AUC, color = method, shape = as.factor(n))) + geom_point(size = 5)+ facet_grid(type ~ K)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.factor(rho), y = AUC, color = method, shape = as.factor(n))) + geom_point(size = 2)+ facet_grid(type ~ K)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.factor(rho), y = AUC, color = method, shape = as.factor(n))) + geom_point(size = 2, alpha = 0.4)+ facet_grid(type ~ K)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
ggplot(plotdata, aes(x = as.factor(rho), y = AUC, color = method, shape = as.factor(n))) + geom_point(size = 2, alpha = 0.8)+ facet_grid(type ~ K)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
data1 = dplyr::filter(plotdata, n == 100)
ggplot(data1, aes(x = as.factor(rho), y = AUC, color = method, shape = as.factor(n))) + geom_point(size = 2, alpha = 0.8)+ facet_grid(type ~ K)
data2 = dplyr::filter(plotdata, n == 400)
ggplot(data2, aes(x = as.factor(rho), y = AUC, color = method, shape = as.factor(n))) + geom_point(size = 2, alpha = 0.8)+ facet_grid(type ~ K)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
data1 = dplyr::filter(plotdata, n == 100)
ggplot(data1, aes(x = as.factor(rho), y = AUC, color = method, shape = as.factor(n))) + geom_point(size = 2, alpha = 0.4)+ facet_grid(type ~ K)
data2 = dplyr::filter(plotdata, n == 400)
ggplot(data2, aes(x = as.factor(rho), y = AUC, color = method, shape = as.factor(n))) + geom_point(size = 2, alpha = 0.4)+ facet_grid(type ~ K)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
data1 = dplyr::filter(plotdata, n == 100)
ggplot(data1, aes(x = as.factor(rho), y = AUC, color = method, shape = method)) + geom_point(size = 2, alpha = 0.8)+ facet_grid(type ~ K)
data2 = dplyr::filter(plotdata, n == 400)
ggplot(data2, aes(x = as.factor(rho), y = AUC, color = method, shape = method)) + geom_point(size = 2, alpha = 0.8)+ facet_grid(type ~ K)
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
data1 = dplyr::filter(plotdata, n == 100)
ggplot(data1, aes(x = as.factor(rho), y = AUC, color = method, shape = method)) + geom_point(size = 2, alpha = 0.8)+ facet_grid(type ~ K)+ title("sample size n = 100")
library(ggplot2)
plotdata = tidyr::gather(simu.table, method, AUC, -c(n,K,rho,type))
data1 = dplyr::filter(plotdata, n == 100)
ggplot(data1, aes(x = as.factor(rho), y = AUC, color = method, shape = method)) + geom_point(size = 2, alpha = 0.8)+ facet_grid(type ~ K)+ ggtitle("sample size n = 100")
data2 = dplyr::filter(plotdata, n == 400)
ggplot(data2, aes(x = as.factor(rho), y = AUC, color = method, shape = method)) + geom_point(size = 2, alpha = 0.8)+ facet_grid(type ~ K)+ ggtitle("sample size n = 400")
install("pslassoR")
install.packages("pslassoR", repos = NULL, type="source")
devtools::check()
cd pslassoR
setwd("./pslassoR")
devtools::check()
usethis::use_data(simu.table)
devtools::check()
devtools::check()
devtools::check()
library(reticulate)
source_py(models.py)
source_python(models.py)
py_run_file(models.py)
py_run_file("models.py")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
setwd("..")
usethis::use_package("pROC", type = "Imports")
usethis::use_package("parallel", type = "Imports")
devtools::check()
setwd("~/Desktop/UPenn Course/2019 spring/computing/pslassoR")
devtools::check()
devtools::build()
setwd("~/Desktop/UPenn Course/2019 spring/computing")
install.packages("pslassoR", repos = NULL, type="source")
View(Simulation)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pslassoR)
Test = function(K, node){
op = mclapply(1:K, Simulation, n =100, K = 20, rho = 0.2, type = "block", mc.cores=node)
}
library(microbenchmark)
result1 =  microbenchmark(Test(K = 100,node = 1),Test(K = 100,node = 2), Test(K = 100,node = 4))
library(parallel)
Test = function(K, node){
op = mclapply(1:K, Simulation, n =100, K = 20, rho = 0.2, type = "block", mc.cores=node)
}
library(microbenchmark)
result1 =  microbenchmark(Test(K = 10,node = 1),Test(K = 10,node = 2), Test(K = 10,node = 4), times = 5)
result1
library(parallel)
Test = function(K, node){
op = mclapply(1:K, Simulation, n =100, K = 20, rho = 0.2, type = "block", mc.cores=node)
}
library(microbenchmark)
result1 =  microbenchmark(Test(K = 10,node = 1),Test(K = 10,node = 2), Test(K = 10,node = 4), times = 10)
library(parallel)
Test = function(K, node){
op = mclapply(1:K, Simulation, n =100, K = 20, rho = 0.2, type = "block", mc.cores=node)
}
result1 = microbenchmark(Simulation(1,n =100, K = 20, rho = 0.2, type = "block") , times = 100)
library(microbenchmark)
result2 =  microbenchmark(Test(K = 10,node = 1),Test(K = 10,node = 2), Test(K = 10,node = 4), times = 10)
result1
View(result1)
c(mean(result1), sd(result1))
c(mean(result1$time), sd(result1$time))
c(mean(result1$time), sd(result1$time))/10^6
c(mean(result1$time), sd(result1$time))/10^9
time.result = c(mean(result1$time), sd(result1$time))/10^9
result2
save(result2, file = "time.result2.Rdata")
rm(Simulation)
save(time.result, file = "time.result1.Rdata")
summary(result2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
load("simu.table.rda")
load("time.result1.Rdata")
load("time.result2.Rdata")
summary(result2)
kable(summary(result2), format ="latex", digits = 4, caption = "Runing time for parallel computing")
summary(result2)
print(result2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
load("simu.table.rda")
load("time.result1.Rdata")
load("time.result2.Rdata")
print(result2)
print.microbenchmark(result2)
class(result2, "microbenchmark")
class "microbenchmark")
class("microbenchmark")
class(result2)
